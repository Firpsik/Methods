using System;
using System.Collections;
using System.Collections.Generic;

class HelloWorld 
{
    static void Main() 
    {
        
        Hashtable Hasht = new Hashtable() 
        {
            { "123", "12345678" },
            { "Who", "Is_Here?" },
            { "char", "!@#$%^&*" }
        };
        
        while (true)
        {
            menu();
            
            int number = int.Parse(Console.ReadLine());
            Console.Clear();

            switch (number) 
            {

                case 1:
                    func("Исходная ", Hasht);
                    Console.Write("Key=");
                    string add = Console.ReadLine();
                    Console.Write("value=");
                    Hasht.Add(add, Console.ReadLine());
                    func("Новая ", Hasht);
                    break;

                case 2: 
                    func("Исходная ", Hasht);
                    Hasht.Clear();
                    func("Новая ", Hasht);
                    break;

                case 3:
                    func("", Hasht);
                    Console.WriteLine(Hasht.ContainsKey(Console.ReadLine()));
                    break;

                case 4:
                    func("", Hasht);
                    Console.WriteLine(Hasht.ContainsValue(Console.ReadLine()));
                    break;

                case 5:
                    func("", Hasht);
                    Array copy = new string[Hasht.Count];
                    Console.Write("Ключи или Значения (1/2): ");
                    string kov = Console.ReadLine();
                    if (kov == "1")
                        Hasht.Keys.CopyTo(copy, 0);
                    else 
                        Hasht.Values.CopyTo(copy, 0);
                    Console.WriteLine("Array: ");
                    foreach (string some in copy) 
                        Console.Write(some);
                    break;

                case 6:
                    func("Исходная ", Hasht);
                    Hasht.Remove(Console.ReadLine());
                    func("Новая ", Hasht);
                    break;

                case 7:
                    func("Исходная ", Hasht);
                    Hashtable Synchr = Hashtable.Synchronized(Hasht);
                    func("Синхронизированная ", Synchr);
                    break;

                case 8:
                    func("Исходная ", Hasht);
                    Hasht.Clone();
                    func("Клон ", Hasht);
                    break;

                case 9:
                    Console.WriteLine(Hasht.GetType()); 
                    break;

                case 10:
                    func("1. ", Hasht);
                    Hashtable Some_another = new Hashtable() 
                    {
                        { "123", "45678" },
                        { "here", "firps" },
                        { "c", "!@#" }
                    };
                    func("2. ", Some_another);
                    Console.WriteLine(Hasht.Equals(Some_another));
                    break;

                case 0: Environment.Exit(0); break;
            }
            Console.ReadKey();
            Console.Clear();
        }
    }
    
    static void menu() 
    {
        Console.WriteLine("1. Add");
        Console.WriteLine("2. Clear");
        Console.WriteLine("3. ContainsKey");
        Console.WriteLine("4. ContainsValue");
        Console.WriteLine("5. CopyTo");
        Console.WriteLine("6. Remove");
        Console.WriteLine("7. Synchronized");
        Console.WriteLine("8. Clone");
        Console.WriteLine("9. GetType");
        Console.WriteLine("10. Equals");
        Console.WriteLine("0. Exit");
    }
    
    static void func(string name, Hashtable hashtab) 
    {
        Console.WriteLine(name + "Hashtable: ");
        foreach (DictionaryEntry some in hashtab) 
        {
            Console.WriteLine(some.Key + "=" + some.Value);
        }
        Console.WriteLine();
    }
}
